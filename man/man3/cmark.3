.TH cmark 3 "December 13, 2014" "LOCAL" "Library Functions Manual"
.SH
NAME
.PP
\f[B]cmark\f[] \- CommonMark parsing, manipulating, and rendering

.SH
DESCRIPTION
.SS
Simple Interface

.nf
\fC
.RS 0n
#define CMARK_VERSION "0.1"
.RE
\f[]
.fi

Current version of library.

\fIchar *\f[] \fBcmark_markdown_to_html\f[](\fIconst char *text\f[], \fIint len\f[])

Convert \fItext\f[] (assumed to be a UTF-8 encoded string with length
\fIlen\f[] from CommonMark Markdown to HTML, returning a null-terminated,
UTF-8-encoded string.

.SS
Node Structure

.nf
\fC
.RS 0n
typedef enum {
	/* Error status */
	CMARK_NODE_NONE,

	/* Block */
	CMARK_NODE_DOCUMENT,
	CMARK_NODE_BLOCK_QUOTE,
	CMARK_NODE_LIST,
	CMARK_NODE_LIST_ITEM,
	CMARK_NODE_CODE_BLOCK,
	CMARK_NODE_HTML,
	CMARK_NODE_PARAGRAPH,
	CMARK_NODE_HEADER,
	CMARK_NODE_HRULE,

	CMARK_NODE_FIRST_BLOCK = CMARK_NODE_DOCUMENT,
	CMARK_NODE_LAST_BLOCK  = CMARK_NODE_HRULE,

	/* Inline */
	CMARK_NODE_TEXT,
	CMARK_NODE_SOFTBREAK,
	CMARK_NODE_LINEBREAK,
	CMARK_NODE_INLINE_CODE,
	CMARK_NODE_INLINE_HTML,
	CMARK_NODE_EMPH,
	CMARK_NODE_STRONG,
	CMARK_NODE_LINK,
	CMARK_NODE_IMAGE,

	CMARK_NODE_FIRST_INLINE = CMARK_NODE_TEXT,
	CMARK_NODE_LAST_INLINE  = CMARK_NODE_IMAGE,
} cmark_node_type;
.RE
\f[]
.fi



.nf
\fC
.RS 0n
typedef enum {
	CMARK_NO_LIST,
	CMARK_BULLET_LIST,
	CMARK_ORDERED_LIST
}  cmark_list_type;
.RE
\f[]
.fi



.nf
\fC
.RS 0n
typedef enum {
	CMARK_PERIOD_DELIM,
	CMARK_PAREN_DELIM
} cmark_delim_type;
.RE
\f[]
.fi



.SS
Creating and Destroying Nodes

\fIcmark_node*\f[] \fBcmark_node_new\f[](\fIcmark_node_type type\f[])



\fIvoid\f[] \fBcmark_node_free\f[](\fIcmark_node *node\f[])



.SS
Tree Traversal

\fIcmark_node*\f[] \fBcmark_node_previous\f[](\fIcmark_node *node\f[])



\fIcmark_node*\f[] \fBcmark_node_parent\f[](\fIcmark_node *node\f[])



\fIcmark_node*\f[] \fBcmark_node_first_child\f[](\fIcmark_node *node\f[])



\fIcmark_node*\f[] \fBcmark_node_last_child\f[](\fIcmark_node *node\f[])



.SS
Iterator

\fIcmark_iter*\f[] \fBcmark_iter_new\f[](\fIcmark_node *root\f[])



\fIvoid\f[] \fBcmark_iter_free\f[](\fIcmark_iter *iter\f[])



\fIcmark_event_type\f[] \fBcmark_iter_next\f[](\fIcmark_iter *iter\f[])



\fIcmark_node*\f[] \fBcmark_iter_get_node\f[](\fIcmark_iter *iter\f[])



.SS
Accessors

\fIcmark_node_type\f[] \fBcmark_node_get_type\f[](\fIcmark_node *node\f[])



\fIconst char*\f[] \fBcmark_node_get_string_content\f[](\fIcmark_node *node\f[])



\fIint\f[] \fBcmark_node_set_string_content\f[](\fIcmark_node *node\f[], \fIconst char *content\f[])



\fIint\f[] \fBcmark_node_get_header_level\f[](\fIcmark_node *node\f[])



\fIint\f[] \fBcmark_node_set_header_level\f[](\fIcmark_node *node\f[], \fIint level\f[])



\fIcmark_list_type\f[] \fBcmark_node_get_list_type\f[](\fIcmark_node *node\f[])



\fIint\f[] \fBcmark_node_set_list_type\f[](\fIcmark_node *node\f[], \fIcmark_list_type type\f[])



\fIint\f[] \fBcmark_node_get_list_start\f[](\fIcmark_node *node\f[])



\fIint\f[] \fBcmark_node_set_list_start\f[](\fIcmark_node *node\f[], \fIint start\f[])



\fIint\f[] \fBcmark_node_get_list_tight\f[](\fIcmark_node *node\f[])



\fIint\f[] \fBcmark_node_set_list_tight\f[](\fIcmark_node *node\f[], \fIint tight\f[])



\fIconst char*\f[] \fBcmark_node_get_fence_info\f[](\fIcmark_node *node\f[])



\fIint\f[] \fBcmark_node_set_fence_info\f[](\fIcmark_node *node\f[], \fIconst char *info\f[])



\fIconst char*\f[] \fBcmark_node_get_url\f[](\fIcmark_node *node\f[])



\fIint\f[] \fBcmark_node_set_url\f[](\fIcmark_node *node\f[], \fIconst char *url\f[])



\fIconst char*\f[] \fBcmark_node_get_title\f[](\fIcmark_node *node\f[])



\fIint\f[] \fBcmark_node_set_title\f[](\fIcmark_node *node\f[], \fIconst char *title\f[])



\fIint\f[] \fBcmark_node_get_start_line\f[](\fIcmark_node *node\f[])



\fIint\f[] \fBcmark_node_get_start_column\f[](\fIcmark_node *node\f[])



\fIint\f[] \fBcmark_node_get_end_line\f[](\fIcmark_node *node\f[])



.SS
Tree Manipulation

\fIvoid\f[] \fBcmark_node_unlink\f[](\fIcmark_node *node\f[])



\fIint\f[] \fBcmark_node_insert_before\f[](\fIcmark_node *node\f[], \fIcmark_node *sibling\f[])



\fIint\f[] \fBcmark_node_insert_after\f[](\fIcmark_node *node\f[], \fIcmark_node *sibling\f[])



\fIint\f[] \fBcmark_node_prepend_child\f[](\fIcmark_node *node\f[], \fIcmark_node *child\f[])



\fIint\f[] \fBcmark_node_append_child\f[](\fIcmark_node *node\f[], \fIcmark_node *child\f[])



.SS
Parsing

\fIcmark_parser *\f[] \fBcmark_parser_new\f[](\fI\f[])



\fIvoid\f[] \fBcmark_parser_free\f[](\fIcmark_parser *parser\f[])



\fIcmark_node *\f[] \fBcmark_parser_finish\f[](\fIcmark_parser *parser\f[])



\fIvoid\f[] \fBcmark_parser_feed\f[](\fIcmark_parser *parser\f[], \fIconst char *buffer\f[], \fIsize_t len\f[])



\fIcmark_node *\f[] \fBcmark_parse_document\f[](\fIconst char *buffer\f[], \fIsize_t len\f[])



\fIcmark_node *\f[] \fBcmark_parse_file\f[](\fIFILE *f\f[])



.SS
Rendering

\fIchar *\f[] \fBcmark_render_ast\f[](\fIcmark_node *root\f[])



\fIchar *\f[] \fBcmark_render_html\f[](\fIcmark_node *root\f[])



\fIchar *\f[] \fBcmark_render_man\f[](\fIcmark_node *root\f[])



.SH
AUTHORS
.PP
John MacFarlane, Vicent Marti,  Kārlis Gaņģis, Nick Wellnhofer.

