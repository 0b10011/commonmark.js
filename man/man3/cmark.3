.TH cmark 3 "December 13, 2014" "LOCAL" "Library Functions Manual"
.SH
NAME
.PP
\f[B]cmark\f[] \- CommonMark parsing, manipulating, and rendering

.SH
DESCRIPTION
.SS
Simple Interface

.nf
\f[C]
.RS 0n
#define CMARK_VERSION "0.1"
.RE
\f[]
.fi

Current version of library.

\f[CI]char *\f[] \f[CB]cmark_markdown_to_html\f[](\f[CI]const char *text\f[], \f[CI]int len\f[])

Convert \f[CI]text\f[] (assumed to be a UTF-8 encoded string with length
\f[CI]len\f[] from CommonMark Markdown to HTML, returning a null-terminated,
UTF-8-encoded string.

.SS
Node Structure

.nf
\f[C]
.RS 0n
typedef enum {
	/* Error status */
	CMARK_NODE_NONE,

	/* Block */
	CMARK_NODE_DOCUMENT,
	CMARK_NODE_BLOCK_QUOTE,
	CMARK_NODE_LIST,
	CMARK_NODE_LIST_ITEM,
	CMARK_NODE_CODE_BLOCK,
	CMARK_NODE_HTML,
	CMARK_NODE_PARAGRAPH,
	CMARK_NODE_HEADER,
	CMARK_NODE_HRULE,

	CMARK_NODE_FIRST_BLOCK = CMARK_NODE_DOCUMENT,
	CMARK_NODE_LAST_BLOCK  = CMARK_NODE_HRULE,

	/* Inline */
	CMARK_NODE_TEXT,
	CMARK_NODE_SOFTBREAK,
	CMARK_NODE_LINEBREAK,
	CMARK_NODE_INLINE_CODE,
	CMARK_NODE_INLINE_HTML,
	CMARK_NODE_EMPH,
	CMARK_NODE_STRONG,
	CMARK_NODE_LINK,
	CMARK_NODE_IMAGE,

	CMARK_NODE_FIRST_INLINE = CMARK_NODE_TEXT,
	CMARK_NODE_LAST_INLINE  = CMARK_NODE_IMAGE,
} cmark_node_type;
.RE
\f[]
.fi



.nf
\f[C]
.RS 0n
typedef enum {
	CMARK_NO_LIST,
	CMARK_BULLET_LIST,
	CMARK_ORDERED_LIST
}  cmark_list_type;
.RE
\f[]
.fi



.nf
\f[C]
.RS 0n
typedef enum {
	CMARK_PERIOD_DELIM,
	CMARK_PAREN_DELIM
} cmark_delim_type;
.RE
\f[]
.fi



.SS
Creating and Destroying Nodes

\f[CI]cmark_node*\f[] \f[CB]cmark_node_new\f[](\f[CI]cmark_node_type type\f[])



\f[CI]void\f[] \f[CB]cmark_node_free\f[](\f[CI]cmark_node *node\f[])



.SS
Tree Traversal

\f[CI]cmark_node*\f[] \f[CB]cmark_node_previous\f[](\f[CI]cmark_node *node\f[])



\f[CI]cmark_node*\f[] \f[CB]cmark_node_parent\f[](\f[CI]cmark_node *node\f[])



\f[CI]cmark_node*\f[] \f[CB]cmark_node_first_child\f[](\f[CI]cmark_node *node\f[])



\f[CI]cmark_node*\f[] \f[CB]cmark_node_last_child\f[](\f[CI]cmark_node *node\f[])



.SS
Iterator

\f[CI]cmark_iter*\f[] \f[CB]cmark_iter_new\f[](\f[CI]cmark_node *root\f[])



\f[CI]void\f[] \f[CB]cmark_iter_free\f[](\f[CI]cmark_iter *iter\f[])



\f[CI]cmark_event_type\f[] \f[CB]cmark_iter_next\f[](\f[CI]cmark_iter *iter\f[])



\f[CI]cmark_node*\f[] \f[CB]cmark_iter_get_node\f[](\f[CI]cmark_iter *iter\f[])



.SS
Accessors

\f[CI]cmark_node_type\f[] \f[CB]cmark_node_get_type\f[](\f[CI]cmark_node *node\f[])



\f[CI]const char*\f[] \f[CB]cmark_node_get_string_content\f[](\f[CI]cmark_node *node\f[])



\f[CI]int\f[] \f[CB]cmark_node_set_string_content\f[](\f[CI]cmark_node *node\f[], \f[CI]const char *content\f[])



\f[CI]int\f[] \f[CB]cmark_node_get_header_level\f[](\f[CI]cmark_node *node\f[])



\f[CI]int\f[] \f[CB]cmark_node_set_header_level\f[](\f[CI]cmark_node *node\f[], \f[CI]int level\f[])



\f[CI]cmark_list_type\f[] \f[CB]cmark_node_get_list_type\f[](\f[CI]cmark_node *node\f[])



\f[CI]int\f[] \f[CB]cmark_node_set_list_type\f[](\f[CI]cmark_node *node\f[], \f[CI]cmark_list_type type\f[])



\f[CI]int\f[] \f[CB]cmark_node_get_list_start\f[](\f[CI]cmark_node *node\f[])



\f[CI]int\f[] \f[CB]cmark_node_set_list_start\f[](\f[CI]cmark_node *node\f[], \f[CI]int start\f[])



\f[CI]int\f[] \f[CB]cmark_node_get_list_tight\f[](\f[CI]cmark_node *node\f[])



\f[CI]int\f[] \f[CB]cmark_node_set_list_tight\f[](\f[CI]cmark_node *node\f[], \f[CI]int tight\f[])



\f[CI]const char*\f[] \f[CB]cmark_node_get_fence_info\f[](\f[CI]cmark_node *node\f[])



\f[CI]int\f[] \f[CB]cmark_node_set_fence_info\f[](\f[CI]cmark_node *node\f[], \f[CI]const char *info\f[])



\f[CI]const char*\f[] \f[CB]cmark_node_get_url\f[](\f[CI]cmark_node *node\f[])



\f[CI]int\f[] \f[CB]cmark_node_set_url\f[](\f[CI]cmark_node *node\f[], \f[CI]const char *url\f[])



\f[CI]const char*\f[] \f[CB]cmark_node_get_title\f[](\f[CI]cmark_node *node\f[])



\f[CI]int\f[] \f[CB]cmark_node_set_title\f[](\f[CI]cmark_node *node\f[], \f[CI]const char *title\f[])



\f[CI]int\f[] \f[CB]cmark_node_get_start_line\f[](\f[CI]cmark_node *node\f[])



\f[CI]int\f[] \f[CB]cmark_node_get_start_column\f[](\f[CI]cmark_node *node\f[])



\f[CI]int\f[] \f[CB]cmark_node_get_end_line\f[](\f[CI]cmark_node *node\f[])



.SS
Tree Manipulation

\f[CI]void\f[] \f[CB]cmark_node_unlink\f[](\f[CI]cmark_node *node\f[])



\f[CI]int\f[] \f[CB]cmark_node_insert_before\f[](\f[CI]cmark_node *node\f[], \f[CI]cmark_node *sibling\f[])



\f[CI]int\f[] \f[CB]cmark_node_insert_after\f[](\f[CI]cmark_node *node\f[], \f[CI]cmark_node *sibling\f[])



\f[CI]int\f[] \f[CB]cmark_node_prepend_child\f[](\f[CI]cmark_node *node\f[], \f[CI]cmark_node *child\f[])



\f[CI]int\f[] \f[CB]cmark_node_append_child\f[](\f[CI]cmark_node *node\f[], \f[CI]cmark_node *child\f[])



.SS
Parsing

\f[CI]cmark_parser *\f[] \f[CB]cmark_parser_new\f[](\f[CI]\f[])



\f[CI]void\f[] \f[CB]cmark_parser_free\f[](\f[CI]cmark_parser *parser\f[])



\f[CI]cmark_node *\f[] \f[CB]cmark_parser_finish\f[](\f[CI]cmark_parser *parser\f[])



\f[CI]void\f[] \f[CB]cmark_parser_feed\f[](\f[CI]cmark_parser *parser\f[], \f[CI]const char *buffer\f[], \f[CI]size_t len\f[])



\f[CI]cmark_node *\f[] \f[CB]cmark_parse_document\f[](\f[CI]const char *buffer\f[], \f[CI]size_t len\f[])



\f[CI]cmark_node *\f[] \f[CB]cmark_parse_file\f[](\f[CI]FILE *f\f[])



.SS
Rendering

\f[CI]char *\f[] \f[CB]cmark_render_ast\f[](\f[CI]cmark_node *root\f[])



\f[CI]char *\f[] \f[CB]cmark_render_html\f[](\f[CI]cmark_node *root\f[])



\f[CI]char *\f[] \f[CB]cmark_render_man\f[](\f[CI]cmark_node *root\f[])



.SH
AUTHORS
.PP
John MacFarlane, Vicent Marti,  Kārlis Gaņģis, Nick Wellnhofer.

